function[vehiclesArray,numTimesteps,numVehiclesPerTimestep] =...
    parseSUMOMobility(inputFile, bBoxVehicles)
% PARSESUMOMOBILITY Parses vehicular mobility input file generated by SUMO.
% Note: the SUMO output needs to be generated of type Floating Car Data
% (FCD): http://sumo-sim.org/userdoc/Simulation/Output/FCDOutput.html
% Example output command: 
% sumo.exe -c cfgFile.cfg --fcd-output outputFile.xml --fcd-output.geo true
%
% Input:   
%   inputFile:              input SUMO (XML) file
%   bBoxVehicles            bounding box for removing vehicles outside of
%                           desired area
%bBoxVehicles = [6.93,50.913,7,50.96]; %for Cologne city
%
% Output: 
%   vehiclesArray:          array to store vehicle information; structure:
%                           |Timestep|VehicleID|Lat|Lon|Veh. Type|Bearing| 
%   numTimesteps:           number of simulation timesteps
%   numVehiclesPerTimestep: number of vehicles per timestep
%
% Copyright (c) 2014-2015, Mate Boban

% Angle correction in degrees
correctionAngle=90;

% Convert input XML file to MATLAB structure
%SUMOMobilityFile = externalCode.xml2struct.xml2struct(inputFile);
SUMOMobilityFile = create_mobility_file.xml2struct.xml2structMod(inputFile);
% Get the number of timesteps
numTimesteps = size(SUMOMobilityFile.fcd_dash_export.timestep,2);

% Array to store the number of vehicles per timestep
numVehiclesPerTimestep = zeros(numTimesteps,1);

% Preallocate vehicles rows (e.g., 1000 per timestep).
vehiclesArray = ones(numTimesteps*1000,5)*Inf;
currvehiclesArrayIndex = 1;
% In case of a single time-step, SUMOMobilityFile.fcd_dash_export.timestep
% variable is not a cell, but a struct; in this case, convert it to cell
% (thanks goes to Nikos Kanistras and Ioannis Sarris for catching this!)
if (numTimesteps == 1)
    SUMOMobilityFile.fcd_dash_export.timestep = {SUMOMobilityFile.fcd_dash_export.timestep};
end
% For each timestep, get all vehicles and their information
for ii=1:numTimesteps
    numVehiclesPerTimestep(ii) = ...
        size(SUMOMobilityFile.fcd_dash_export.timestep{ii}.vehicle,2);
    % If there is a single vehicle in time step, it is in a struct, not
    % cell; convert to cell
    if numVehiclesPerTimestep(ii)==1
        SUMOMobilityFile.fcd_dash_export.timestep{ii}.vehicle = ...
            {SUMOMobilityFile.fcd_dash_export.timestep{ii}.vehicle};
    end
    for jj=1:numVehiclesPerTimestep(ii)
        % Get the ID of current vehicle       
        if iscell(SUMOMobilityFile.fcd_dash_export.timestep{ii}.vehicle)
        currVehID = SUMOMobilityFile.fcd_dash_export.timestep{ii}.vehicle{jj}.Attributes.id;
        % Extract numeric part of the ID (assumption: the numeric part is unique!)
        currVehicleID =  str2double(currVehID(isstrprop(currVehID,'digit')));
        if isempty(currVehicleID)
            % Assigning a sequential ID to the vehicle. Note: this could
            % result in discrepancies if the nodes' IDs are characters..
            vehiclesArray(currvehiclesArrayIndex,1) = jj;
        else            
            vehiclesArray(currvehiclesArrayIndex,1) = currVehicleID;
        end
%         Get latitude and longitude
        vehiclesArray(currvehiclesArrayIndex,2) = ...
            str2double(SUMOMobilityFile.fcd_dash_export.timestep...
            {ii}.vehicle{jj}.Attributes.y);
        vehiclesArray(currvehiclesArrayIndex,3) = ...
            str2double(SUMOMobilityFile.fcd_dash_export.timestep...
            {ii}.vehicle{jj}.Attributes.x);
         vehiclesArray(currvehiclesArrayIndex,4) = ...
            str2double(SUMOMobilityFile.fcd_dash_export.timestep...
            {ii}.vehicle{jj}.Attributes.speed);
         vehiclesArray(currvehiclesArrayIndex,5) = ...
            str2double(SUMOMobilityFile.fcd_dash_export.timestep...
            {ii}.vehicle{jj}.Attributes.angle);
        % Remove vehicles outside of the bounding box
        if vehiclesArray(currvehiclesArrayIndex,2)<bBoxVehicles(1,2) || ...
           vehiclesArray(currvehiclesArrayIndex,2)>bBoxVehicles(1,4) || ...
           vehiclesArray(currvehiclesArrayIndex,3)<bBoxVehicles(1,1) || ...
           vehiclesArray(currvehiclesArrayIndex,3)>bBoxVehicles(1,3)
            % Mark for deletion
            vehiclesArray(currvehiclesArrayIndex,1) = Inf;
            % Subtract one vehicle from numVehiclesPerTimestep(ii)
            numVehiclesPerTimestep(ii) = numVehiclesPerTimestep(ii)-1;
        end
        
        % Get vehicle type for current vehicle
%         currVehType = SUMOMobilityFile.fcd_dash_export.timestep...
%             {ii}.vehicle{jj}.Attributes.type;
        % Extract numeric part of the vehicle type (assumption: the numeric
        % part is unique!)
%         vehiclesArray(currvehiclesArrayIndex,4) = str2double(currVehType...
%             (isstrprop(currVehType,'digit')));
        % Get the bearing, convert it to radians
        vehiclesArray(currvehiclesArrayIndex,6) = create_mobility_file.deg2rad...
            (str2double(SUMOMobilityFile.fcd_dash_export.timestep...
            {ii}.vehicle{jj}.Attributes.angle)-correctionAngle);    
        % Increase counter
        currvehiclesArrayIndex=currvehiclesArrayIndex+1;
        end
    end
end
% "clean" the parsed array
vehiclesArray = vehiclesArray(vehiclesArray(:,1)~=Inf,:);